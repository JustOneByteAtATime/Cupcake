<?xml version="1.0" encoding="utf-8"?>
<!--
     Copyright (C) 2020 The Android Open Source Project

     Licensed under the Apache License, Version 2.0 (the "License");
     you may not use this file except in compliance with the License.
     You may obtain a copy of the License at

          http://www.apache.org/licenses/LICENSE-2.0

     Unless required by applicable law or agreed to in writing, software
     distributed under the License is distributed on an "AS IS" BASIS,
     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     See the License for the specific language governing permissions and
     limitations under the License.
-->
<!-- Layout for selecting a flavor -->

<!-- In layout/fragment_flavor.xml, add a <data> tag inside the root <layout> tag. Add a layout
variable called viewModel of the type com.example.cupcake.model.OrderViewModel. Make sure the
package name in the type attribute matches with the package name of the shared view model class,
OrderViewModel in your app. -->

<!-- Use ViewModel with data binding 5. n fragment_flavor.xml, use the new layout variable,
viewModel to set the checked attribute of the radio buttons based on the flavor value in the view
model. If the flavor represented by a radio button is the same as the flavor that's saved in the
view model, then display the radio button as selected (checked = true). The binding expression for
the checked state of the Vanilla RadioButton would look like the following:
@{viewModel.flavor.equals(@string/vanilla)} -->

<!-- Use ViewModel with data binding - Listener Bindings 1. Listener bindings are lambda expressions
that run when an event happens, such as an onClick event. They are similar to method references such
as textview.setOnClickListener(clickListener) but listener bindings let you run arbitrary data
binding expressions.
In fragment_flavor.xml, add event listeners to the radio buttons using listener bindings. Use a
lambda expression with no parameters and make a call to the viewModel.setFlavor() method by passing
in the corresponding flavor string resource.
-->

<!-- Calculate Price from Order Details - 3. Within each fragment layout, use the viewModel variable
to set the price if it's shown in the layout. Start with modifying the fragment_flavor.xml file. For
the subtotal text view, set the value of the android:text attribute to be
"@{@string/subtotal_price(viewModel.price)}". This data binding layout expression uses the string
resource @string/subtotal_price and passes in a parameter, which is the price from the view model,
so the output will show Subtotal 12.0 for example. -->

<!-- Setup Click listeners 5. Similarly add the above data variable in other layouts as well to bind
 the fragment instance, fragment_flavor.xml, fragment_pickup.xml, and fragment_summary.xml. -->

<!-- Setup Click listeners 8. Similarly in the other layout files, add listener binding expressions
to the onClick attribute for the buttons.-->

<layout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    tools:context=".FlavorFragment">

    <data>
        <variable
            name="viewModel"
            type="com.example.cupcake.model.OrderViewModel" />

        <variable
            name="flavorFragment"
            type="com.example.cupcake.FlavorFragment" />
    </data>

    <ScrollView
        android:layout_width="match_parent"
        android:layout_height="match_parent">

        <androidx.constraintlayout.widget.ConstraintLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:padding="@dimen/side_margin">

            <RadioGroup
                android:id="@+id/flavor_options"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:orientation="vertical"
                app:layout_constraintStart_toStartOf="parent"
                app:layout_constraintTop_toTopOf="parent">

                <RadioButton
                    android:id="@+id/vanilla"
                    android:layout_width="wrap_content"
                    android:layout_height="wrap_content"
                    android:text="@string/vanilla"
                    android:checked="@{viewModel.flavor.equals(@string/vanilla)}"
                    android:onClick="@{() -> viewModel.setFlavor(@string/vanilla)}"
                    />

                <RadioButton
                    android:id="@+id/chocolate"
                    android:layout_width="wrap_content"
                    android:layout_height="wrap_content"
                    android:text="@string/chocolate"
                    android:checked="@{viewModel.flavor.equals(@string/chocolate)}"
                    android:onClick="@{() -> viewModel.setFlavor(@string/chocolate)}"
                    />

                <RadioButton
                    android:id="@+id/red_velvet"
                    android:layout_width="wrap_content"
                    android:layout_height="wrap_content"
                    android:text="@string/red_velvet"
                    android:checked="@{viewModel.flavor.equals(@string/red_velvet)}"
                    android:onClick="@{() -> viewModel.setFlavor(@string/red_velvet)}"
                    />

                <RadioButton
                    android:id="@+id/salted_caramel"
                    android:layout_width="wrap_content"
                    android:layout_height="wrap_content"
                    android:text="@string/salted_caramel"
                    android:checked="@{viewModel.flavor.equals(@string/salted_caramel)}"
                    android:onClick="@{() -> viewModel.setFlavor(@string/salted_caramel)}"
                    />

                <RadioButton
                    android:id="@+id/coffee"
                    android:layout_width="wrap_content"
                    android:layout_height="wrap_content"
                    android:text="@string/coffee"
                    android:checked="@{viewModel.flavor.equals(@string/coffee)}"
                    android:onClick="@{() -> viewModel.setFlavor(@string/coffee)}"
                    />
            </RadioGroup>

            <View
                android:id="@+id/divider"
                style="@style/Widget.Cupcake.Divider"
                android:layout_width="0dp"
                android:layout_height="1dp"
                android:layout_marginTop="@dimen/side_margin"
                app:layout_constraintEnd_toEndOf="parent"
                app:layout_constraintStart_toStartOf="parent"
                app:layout_constraintTop_toBottomOf="@id/flavor_options" />

            <TextView
                android:id="@+id/subtotal"
                style="@style/Widget.Cupcake.TextView"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_marginTop="@dimen/side_margin"
                android:text="@{@string/subtotal_price(viewModel.price)}"
                app:layout_constraintEnd_toEndOf="parent"
                app:layout_constraintTop_toBottomOf="@id/divider"
                tools:text="Subtotal $5.00" />

            <Button
                android:id="@+id/cancel_button"
                style="?attr/materialButtonOutlinedStyle"
                android:layout_width="0dp"
                android:layout_height="wrap_content"
                android:text="@string/cancel"
                app:layout_constraintEnd_toStartOf="@id/next_button"
                app:layout_constraintStart_toStartOf="parent"
                app:layout_constraintTop_toTopOf="@id/next_button"
                android:layout_marginEnd="@dimen/side_margin"
                android:onClick="@{() -> flavorFragment.cancelOrder()}"
                />

            <Button
                android:id="@+id/next_button"
                android:onClick="@{() -> flavorFragment.goToNextScreen()}"
                android:layout_width="0dp"
                android:layout_height="wrap_content"
                android:layout_marginTop="@dimen/side_margin"
                android:text="@string/next"
                app:layout_constraintBottom_toBottomOf="parent"
                app:layout_constraintEnd_toEndOf="parent"
                app:layout_constraintStart_toEndOf="@id/cancel_button"
                app:layout_constraintTop_toBottomOf="@id/subtotal" />

        </androidx.constraintlayout.widget.ConstraintLayout>
    </ScrollView>
</layout>